syntax = "proto3";

package rbdkv;

option go_package = "github.com/alwaysLinger/rbd-kv/pb";

service Rbdkv {
  rpc Execute(Command) returns (CommandResponse) {}
  rpc Watch(WatchRequest) returns (stream WatchResponse) {}
  rpc LeaderInfo(LeaderRequest) returns (LeaderInfoResponse) {}
  rpc ClusterStats(ClusterStatsRequest) returns (ClusterStatsResponse) {}
}

service Controller {
  rpc Join(JoinRequest) returns (JoinResponse){}
}

message Command {
  enum OpType {
    CmdUnknown = 0;
    Get = 1;
    Put = 2;
    Delete = 3;
  }

  enum ReadConsistency {
    RCUnknown = 0;
    Serializable = 1;
    Linearizable = 2;
  }

  OpType op = 1;
  ReadConsistency rc = 2;
  bytes key = 3;
  bytes value = 4;
  uint64 ttl = 5;
}

message CommandResponse {
  bytes key = 1;
  bytes value = 2;
}

message WatchRequest {
  string watcher_id = 1;
  repeated bytes prefixes = 2;
  uint64 event_capacity = 3;
  bool leader_required = 4;
}

message Event {
  enum EventType {
    EventUnknown = 0;
    Put = 1;
    Delete = 2;
  }

  EventType type = 1;
  bytes key = 2;
  bytes value = 3;
  uint64 version = 4;
  uint64 expire_at = 5;
  string watcher_id = 6;
}

message WatchResponse {
  string watcher_id = 1;
  Event event = 2;
}

message LeaderRequest{}

message LeaderInfoResponse {
  string leader_addr = 1;
  string leader_id = 2;
  uint64 term = 3;
}

message JoinRequest {
  string id = 1;
  string addr = 2;
}

message JoinResponse {
  LeaderInfoResponse leader_info = 1;
}

message ClusterStatsRequest {
  message WithSize {
    bool exact_size = 1;
    bool with_key_count = 2;
  }

  bool with_raft = 1;
  WithSize with_fsm = 2;
}

message ClusterStatsResponse {
  message RaftMeta {
    map<string, string> meta = 5;
  }

  message StorageStats {
    uint64 lsm_size = 1;
    uint64 vlog_size = 2;
    uint64 keys_count = 3;
  }

  message Peer {
    string id = 1;
    bool is_learner = 2;
    bool is_leader = 3;
    bool is_local = 4;
    RaftMeta raft = 5;
    StorageStats fsm = 6;
  }

  repeated Peer peers = 1;
}